name: ${APP_NAME}

services:
  db:
    build: ./db
    container_name: db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5431:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER}"]
      interval: ${HEALTHCHCEK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
      start_period: ${HEALTHCHECK_START_PERIOD}
    networks:
      - service-network
  backend:
    build: ./backend
    container_name: backend
    env_file: .env
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /app
          ignore:
            - __pycache__/
            - .pytest_cache/
            - .ruff_cache/
            - .git/
            - .vscode/ 
        - action: rebuild
          path: ./backend/.venv
    command: |
      sh -c "uvicorn src.app.main:app --reload --host 0.0.0.0 --port 8000"
    # command: |
    #   sh -c "fastapi run src/app/main.py"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/healthcheck || exit 1"]
      interval: ${HEALTHCHCEK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
      start_period: ${HEALTHCHECK_START_PERIOD}
    depends_on:
      db: 
        condition: service_healthy
    networks:
      - service-network
  frontend:
    build: ./frontend
    container_name: frontend
    env_file: .env
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /usr/src/app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./frontend/node_modules
    command: |
      sh -c "npm run dev --turbo"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${FRONTEND_CONTAINER_PORT} || exit 1"]
      interval: ${HEALTHCHCEK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
      start_period: ${HEALTHCHECK_START_PERIOD}
    depends_on:
      db: 
        condition: service_healthy
    networks:
      - service-network
  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "${NGINX_LOCAL_PORT}:${NGINX_CONTAINER_PORT}"
    volumes:
      - ./nginx/logs:/var/log/nginx
    command: "nginx -g 'daemon off;'"
    depends_on:
      frontend:
        condition: service_healthy
    networks:
      - service-network

volumes:
  postgres_data:
    name: postgres_data

networks:
  service-network:
    driver: bridge
